
# /home/andrzej/projects/pyTSI/pyTSI/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '5310C6ABBC82F582FA7AB89AA425986D'
    
_lr_action_items = {'TSINFO':([0,],[2,]),'NODE_NAME':([15,],[24,]),'TREE_NAME':([4,],[7,]),'ATTR':([5,6,9,12,13,14,16,17,27,31,32,34,36,44,47,49,50,52,],[8,-5,-11,-8,-6,-7,-9,-10,-12,-16,8,-17,-13,-14,-15,-25,8,-26,]),'REF_ATTR_NAME':([11,40,],[23,46,]),'$end':([1,10,29,30,36,37,38,41,44,51,54,],[0,-1,-19,-2,-13,-20,-22,-21,-14,-23,-24,]),'REF_NODE_NAME':([19,39,],[26,45,]),'NODE':([5,6,9,12,13,14,16,17,27,31,32,34,36,44,47,49,50,52,],[15,-5,-11,-8,-6,-7,-9,-10,-12,-16,15,-17,-13,-14,-15,-25,15,-26,]),'END_NODE':([6,9,12,13,14,16,17,27,31,32,34,36,44,47,49,52,],[-5,-11,-8,-6,-7,-9,-10,-12,-16,42,-17,-13,-14,-15,-25,-26,]),'REF_NODE':([5,6,9,12,13,14,16,17,27,29,30,31,32,34,36,37,38,41,44,47,49,50,51,52,54,],[19,-5,-11,-8,-6,-7,-9,-10,-12,-19,39,-16,19,-17,-13,-20,-22,-21,-14,-15,-25,19,-23,-26,-24,]),'END_TREE':([5,6,9,12,13,14,16,17,27,31,34,36,44,47,49,52,],[10,-5,-11,-8,-6,-7,-9,-10,-12,-16,-17,-13,-14,-15,-25,-26,]),'IN_MODE':([43,],[48,]),'END_REF_NODE':([6,9,12,13,14,16,17,27,31,34,36,44,47,49,50,52,],[-5,-11,-8,-6,-7,-9,-10,-12,-16,-17,-13,-14,-15,-25,53,-26,]),'NEWLINES':([3,4,10,20,22,23,24,26,28,35,42,43,45,53,],[6,-3,-18,-4,29,31,6,34,36,44,47,49,6,54,]),'VALUE':([2,7,18,21,27,33,36,44,46,48,51,52,],[4,20,25,28,35,43,-13,-14,28,28,35,35,]),'REF_ATTR':([5,6,9,12,13,14,16,17,27,29,30,31,32,34,36,37,38,41,44,47,49,50,51,52,54,],[11,-5,-11,-8,-6,-7,-9,-10,-12,-19,40,-16,11,-17,-13,-20,-22,-21,-14,-15,-25,11,-23,-26,-24,]),'AS_NODE':([25,],[33,]),'ATTR_NAME':([8,],[21,]),'TREE':([5,6,9,12,13,14,16,17,27,31,32,34,36,44,47,49,50,52,],[18,-5,-11,-8,-6,-7,-9,-10,-12,-16,18,-17,-13,-14,-15,-25,18,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'tree':([0,],[1,]),'refElement':([30,],[37,]),'linkedTree':([5,32,50,],[9,9,9,]),'refAttrDeclaration':([5,32,50,],[16,16,16,]),'seen_END_TREE':([10,],[22,]),'attr':([5,32,50,],[14,14,14,]),'valueList':([21,46,48,],[27,51,52,]),'refNodeDeclaration':([5,32,50,],[17,17,17,]),'refNodeDefinition':([30,],[38,]),'elementList':([3,24,45,],[5,32,50,]),'element':([5,32,50,],[13,13,13,]),'refsElementList':([22,],[30,]),'node':([5,32,50,],[12,12,12,]),'refAttrDefinition':([30,],[41,]),'treeheader':([0,],[3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> tree","S'",1,None,None,None),
  ('tree -> treeheader elementList END_TREE','tree',3,'p_tree','parser.py',30),
  ('tree -> treeheader elementList END_TREE seen_END_TREE refsElementList','tree',5,'p_tree','parser.py',31),
  ('treeheader -> TSINFO VALUE','treeheader',2,'p_treeheader','parser.py',35),
  ('treeheader -> TSINFO VALUE TREE_NAME VALUE','treeheader',4,'p_treeheader','parser.py',36),
  ('elementList -> NEWLINES','elementList',1,'p_elementList_empty','parser.py',41),
  ('elementList -> elementList element','elementList',2,'p_elementList_nonempty','parser.py',45),
  ('element -> attr','element',1,'p_element','parser.py',50),
  ('element -> node','element',1,'p_element','parser.py',51),
  ('element -> refAttrDeclaration','element',1,'p_element','parser.py',52),
  ('element -> refNodeDeclaration','element',1,'p_element','parser.py',53),
  ('element -> linkedTree','element',1,'p_element','parser.py',54),
  ('attr -> ATTR ATTR_NAME valueList','attr',3,'p_attr','parser.py',58),
  ('valueList -> VALUE NEWLINES','valueList',2,'p_valueList_single','parser.py',62),
  ('valueList -> valueList VALUE NEWLINES','valueList',3,'p_valueList_multiple','parser.py',66),
  ('node -> NODE NODE_NAME elementList END_NODE NEWLINES','node',5,'p_node','parser.py',71),
  ('refAttrDeclaration -> REF_ATTR REF_ATTR_NAME NEWLINES','refAttrDeclaration',3,'p_refAttrDeclaration','parser.py',75),
  ('refNodeDeclaration -> REF_NODE REF_NODE_NAME NEWLINES','refNodeDeclaration',3,'p_refNodeDeclaration','parser.py',81),
  ('seen_END_TREE -> <empty>','seen_END_TREE',0,'p_seen_END_TREE','parser.py',87),
  ('refsElementList -> NEWLINES','refsElementList',1,'p_refsElementList_empty','parser.py',92),
  ('refsElementList -> refsElementList refElement','refsElementList',2,'p_refsElementList_nonempty','parser.py',95),
  ('refElement -> refAttrDefinition','refElement',1,'p_refElement','parser.py',98),
  ('refElement -> refNodeDefinition','refElement',1,'p_refElement','parser.py',99),
  ('refAttrDefinition -> REF_ATTR REF_ATTR_NAME valueList','refAttrDefinition',3,'p_refAttrDefinition','parser.py',104),
  ('refNodeDefinition -> REF_NODE REF_NODE_NAME elementList END_REF_NODE NEWLINES','refNodeDefinition',5,'p_refNodeDefinition','parser.py',110),
  ('linkedTree -> TREE VALUE AS_NODE VALUE NEWLINES','linkedTree',5,'p_linkedTree_simple','parser.py',117),
  ('linkedTree -> TREE VALUE AS_NODE VALUE IN_MODE valueList','linkedTree',6,'p_linkedTree_extended','parser.py',123),
]
